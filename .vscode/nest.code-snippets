{
  // Place your hipe-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  //   "Print to console": {
  //     "scope": "javascript,typescript",
  //     "prefix": "log",
  //     "body": ["console.log('$1');", "$2"],
  //     "description": "Log output to console"
  //   },
  "Module": {
    "scope": "typescript",
    "prefix": "nest-module",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { Connection } from 'typeorm';",
      "import { DatabaseModule } from '../../database/database.module';",
      "import { ${1/(.*)/${1:/capitalize}/}Entity } from './$1.entity';",
      "import { ${1/(.*)/${1:/capitalize}/}Resolver } from './$1.resolver';",
      "import { ${1/(.*)/${1:/capitalize}/}Service } from './$1.service';",

      "@Module({",
      "imports: [DatabaseModule],",
      "providers: [",
      "{",
      "provide: '${1/(.*)/${1:/upcase}/}_REPOSITORY',",
      "useFactory: (connection: Connection) => connection.getRepository(${1/(.*)/${1:/capitalize}/}),",
      "inject: ['DATABASE_CONNECTION'],",
      "},",
      "${1/(.*)/${1:/capitalize}/}Service,",
      "${1/(.*)/${1:/capitalize}/}Resolver,",
      "],",
      "exports: [${1/(.*)/${1:/capitalize}/}Service],",
      "})",
      "export class ${1/(.*)/${1:/capitalize}/}Module {} ${0}"
    ]
  },
  "Resolver": {
    "scope": "typescript",
    "prefix": "nest-resolver",
    "body": [
      "import {",
      "${1/(.*)/${1:/capitalize}/}Input,",
      "${1/(.*)/${1:/capitalize}/}FiltersInput,",
      "${1/(.*)/${1:/capitalize}/}UpdateInput,",
      "} from '@calendar/shared';",
      "import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';",
      "import { ${1/(.*)/${1:/capitalize}/}Service } from './${1/(.*)/${1:/downcase}/}.service';",
      "",
      "@Resolver('${1/(.*)/${1:/capitalize}/}')",
      "export class ${1/(.*)/${1:/capitalize}/}Resolver {",
      "constructor(private readonly ${1/(.*)/${1:/downcase}/}Service: ${1/(.*)/${1:/capitalize}/}Service) {}",
      "",
      "@Query('${1/(.*)/${1:/downcase}/}')",
      "async get${1/(.*)/${1:/capitalize}/}s(",
      "@Args('${1/(.*)/${1:/capitalize}/}FiltersInput')",
      "${1/(.*)/${1:/downcase}/}FiltersInput: ${1/(.*)/${1:/capitalize}/}FiltersInput,",
      ") {",
      "return await this.${1/(.*)/${1:/downcase}/}Service.get${1/(.*)/${1:/capitalize}/}(${1/(.*)/${1:/downcase}/}FiltersInput);",
      "}",
      "",
      "@Query('${1/(.*)/${1:/downcase}/}')",
      "async get${1/(.*)/${1:/capitalize}/}s(",
      "@Args('id')",
      "id: number,",
      ") {",
      "return await this.${1/(.*)/${1:/downcase}/}Service.get${1/(.*)/${1:/capitalize}/}(id);",
      "}",

      "@Mutation()",
      "async create${1/(.*)/${1:/capitalize}/}(",
      "@Args('${1}Input')",
      "${1}: ${1/(.*)/${1:/capitalize}/}Input,",
      ") {",
      "return await this.${1}Service.create(${1});",
      "}",
      "",
      "@Mutation()",
      "async update${1/(.*)/${1:/capitalize}/}(",
      "@Args('${1}UpdateInput')",
      "${1}: ${1/(.*)/${1:/capitalize}/}UpdateInput,",
      ") {",
      "return await this.${1}Service.update(${1});",
      "}",
      "}"
    ]
  }
}
